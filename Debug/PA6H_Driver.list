
PA6H_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001b8  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800037c  0800037c  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  0800037c  0800037c  0001037c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000380  08000380  00010380  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000008  20000000  08000384  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  20000008  0800038c  00020008  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000028  0800038c  00020028  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
  9 .debug_info   00003ec6  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000098d  00000000  00000000  00023efe  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000288  00000000  00000000  00024890  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000230  00000000  00000000  00024b18  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00001485  00000000  00000000  00024d48  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000320a  00000000  00000000  000261cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000ee7eb  00000000  00000000  000293d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00117bc2  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000008ac  00000000  00000000  00117c40  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000008 	.word	0x20000008
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000364 	.word	0x08000364

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	08000364 	.word	0x08000364

08000204 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000204:	b480      	push	{r7}
 8000206:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000208:	4b06      	ldr	r3, [pc, #24]	; (8000224 <HAL_IncTick+0x20>)
 800020a:	781b      	ldrb	r3, [r3, #0]
 800020c:	461a      	mov	r2, r3
 800020e:	4b06      	ldr	r3, [pc, #24]	; (8000228 <HAL_IncTick+0x24>)
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	4413      	add	r3, r2
 8000214:	4a04      	ldr	r2, [pc, #16]	; (8000228 <HAL_IncTick+0x24>)
 8000216:	6013      	str	r3, [r2, #0]
}
 8000218:	bf00      	nop
 800021a:	46bd      	mov	sp, r7
 800021c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000220:	4770      	bx	lr
 8000222:	bf00      	nop
 8000224:	20000004 	.word	0x20000004
 8000228:	20000024 	.word	0x20000024

0800022c <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000230:	f000 f802 	bl	8000238 <HAL_SYSTICK_Callback>
}
 8000234:	bf00      	nop
 8000236:	bd80      	pop	{r7, pc}

08000238 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000238:	b480      	push	{r7}
 800023a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800023c:	bf00      	nop
 800023e:	46bd      	mov	sp, r7
 8000240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000244:	4770      	bx	lr

08000246 <main>:


			

int main(void)
{
 8000246:	b480      	push	{r7}
 8000248:	af00      	add	r7, sp, #0

	for(;;);
 800024a:	e7fe      	b.n	800024a <main+0x4>

0800024c <SysTick_Handler>:
  * @brief  This function handles SysTick Handler, but only if no RTOS defines it.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8000250:	f7ff ffd8 	bl	8000204 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 8000254:	f7ff ffea 	bl	800022c <HAL_SYSTICK_IRQHandler>
#ifdef USE_RTOS_SYSTICK
	osSystickHandler();
#endif
}
 8000258:	bf00      	nop
 800025a:	bd80      	pop	{r7, pc}

0800025c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800025c:	b480      	push	{r7}
 800025e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000260:	4a16      	ldr	r2, [pc, #88]	; (80002bc <SystemInit+0x60>)
 8000262:	4b16      	ldr	r3, [pc, #88]	; (80002bc <SystemInit+0x60>)
 8000264:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000268:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800026c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000270:	4a13      	ldr	r2, [pc, #76]	; (80002c0 <SystemInit+0x64>)
 8000272:	4b13      	ldr	r3, [pc, #76]	; (80002c0 <SystemInit+0x64>)
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	f043 0301 	orr.w	r3, r3, #1
 800027a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800027c:	4b10      	ldr	r3, [pc, #64]	; (80002c0 <SystemInit+0x64>)
 800027e:	2200      	movs	r2, #0
 8000280:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000282:	4a0f      	ldr	r2, [pc, #60]	; (80002c0 <SystemInit+0x64>)
 8000284:	4b0e      	ldr	r3, [pc, #56]	; (80002c0 <SystemInit+0x64>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800028c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000290:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000292:	4b0b      	ldr	r3, [pc, #44]	; (80002c0 <SystemInit+0x64>)
 8000294:	4a0b      	ldr	r2, [pc, #44]	; (80002c4 <SystemInit+0x68>)
 8000296:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000298:	4a09      	ldr	r2, [pc, #36]	; (80002c0 <SystemInit+0x64>)
 800029a:	4b09      	ldr	r3, [pc, #36]	; (80002c0 <SystemInit+0x64>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80002a2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80002a4:	4b06      	ldr	r3, [pc, #24]	; (80002c0 <SystemInit+0x64>)
 80002a6:	2200      	movs	r2, #0
 80002a8:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80002aa:	4b04      	ldr	r3, [pc, #16]	; (80002bc <SystemInit+0x60>)
 80002ac:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80002b0:	609a      	str	r2, [r3, #8]
#endif
}
 80002b2:	bf00      	nop
 80002b4:	46bd      	mov	sp, r7
 80002b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ba:	4770      	bx	lr
 80002bc:	e000ed00 	.word	0xe000ed00
 80002c0:	40023800 	.word	0x40023800
 80002c4:	24003010 	.word	0x24003010

080002c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80002c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000300 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80002cc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80002ce:	e003      	b.n	80002d8 <LoopCopyDataInit>

080002d0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80002d0:	4b0c      	ldr	r3, [pc, #48]	; (8000304 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80002d2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80002d4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80002d6:	3104      	adds	r1, #4

080002d8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80002d8:	480b      	ldr	r0, [pc, #44]	; (8000308 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80002da:	4b0c      	ldr	r3, [pc, #48]	; (800030c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80002dc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80002de:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80002e0:	d3f6      	bcc.n	80002d0 <CopyDataInit>
  ldr  r2, =_sbss
 80002e2:	4a0b      	ldr	r2, [pc, #44]	; (8000310 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80002e4:	e002      	b.n	80002ec <LoopFillZerobss>

080002e6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80002e6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80002e8:	f842 3b04 	str.w	r3, [r2], #4

080002ec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80002ec:	4b09      	ldr	r3, [pc, #36]	; (8000314 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80002ee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80002f0:	d3f9      	bcc.n	80002e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80002f2:	f7ff ffb3 	bl	800025c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80002f6:	f000 f811 	bl	800031c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80002fa:	f7ff ffa4 	bl	8000246 <main>
  bx  lr    
 80002fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000300:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000304:	08000384 	.word	0x08000384
  ldr  r0, =_sdata
 8000308:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800030c:	20000008 	.word	0x20000008
  ldr  r2, =_sbss
 8000310:	20000008 	.word	0x20000008
  ldr  r3, = _ebss
 8000314:	20000028 	.word	0x20000028

08000318 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000318:	e7fe      	b.n	8000318 <ADC_IRQHandler>
	...

0800031c <__libc_init_array>:
 800031c:	b570      	push	{r4, r5, r6, lr}
 800031e:	4e0d      	ldr	r6, [pc, #52]	; (8000354 <__libc_init_array+0x38>)
 8000320:	4c0d      	ldr	r4, [pc, #52]	; (8000358 <__libc_init_array+0x3c>)
 8000322:	1ba4      	subs	r4, r4, r6
 8000324:	10a4      	asrs	r4, r4, #2
 8000326:	2500      	movs	r5, #0
 8000328:	42a5      	cmp	r5, r4
 800032a:	d109      	bne.n	8000340 <__libc_init_array+0x24>
 800032c:	4e0b      	ldr	r6, [pc, #44]	; (800035c <__libc_init_array+0x40>)
 800032e:	4c0c      	ldr	r4, [pc, #48]	; (8000360 <__libc_init_array+0x44>)
 8000330:	f000 f818 	bl	8000364 <_init>
 8000334:	1ba4      	subs	r4, r4, r6
 8000336:	10a4      	asrs	r4, r4, #2
 8000338:	2500      	movs	r5, #0
 800033a:	42a5      	cmp	r5, r4
 800033c:	d105      	bne.n	800034a <__libc_init_array+0x2e>
 800033e:	bd70      	pop	{r4, r5, r6, pc}
 8000340:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000344:	4798      	blx	r3
 8000346:	3501      	adds	r5, #1
 8000348:	e7ee      	b.n	8000328 <__libc_init_array+0xc>
 800034a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800034e:	4798      	blx	r3
 8000350:	3501      	adds	r5, #1
 8000352:	e7f2      	b.n	800033a <__libc_init_array+0x1e>
 8000354:	0800037c 	.word	0x0800037c
 8000358:	0800037c 	.word	0x0800037c
 800035c:	0800037c 	.word	0x0800037c
 8000360:	08000380 	.word	0x08000380

08000364 <_init>:
 8000364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000366:	bf00      	nop
 8000368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800036a:	bc08      	pop	{r3}
 800036c:	469e      	mov	lr, r3
 800036e:	4770      	bx	lr

08000370 <_fini>:
 8000370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000372:	bf00      	nop
 8000374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000376:	bc08      	pop	{r3}
 8000378:	469e      	mov	lr, r3
 800037a:	4770      	bx	lr
